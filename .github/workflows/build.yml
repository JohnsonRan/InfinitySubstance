name: Build OpenWrt Packages

on:
  schedule:
    - cron: '30 0 * * *' 
  workflow_dispatch:

env:
  TZ: Asia/Shanghai

jobs:
  check:
    runs-on: ubuntu-24.04
    outputs:
      should_build: ${{ github.event_name == 'workflow_dispatch' || steps.check-updates.outputs.has_changes }}
      release_body: ${{ steps.check-updates.outputs.release_body }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Check upstream changes
        id: check-updates
        if: github.event_name != 'workflow_dispatch'
        run: |
          has_changes=false
          release_body=""
          
          # 获取本项目最新release日期
          latest_release_date=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases?per_page=1" | jq -r '.[0].published_at[:10]' 2>/dev/null || echo "1970-01-01")
          echo "Latest release date: $latest_release_date"
          
          for repo in $(grep -v '^$' sourcelist.txt); do
            echo "Checking $repo..."
            # 获取最新提交的日期和commit hash
            repo_info=$(curl -s "https://api.github.com/repos/$repo/commits?per_page=1")
            latest_commit_date=$(echo "$repo_info" | jq -r '.[0].commit.committer.date[:10]')
            latest_commit_hash=$(echo "$repo_info" | jq -r '.[0].sha')
            short_commit_hash=${latest_commit_hash:0:7}
            
            echo "$repo - Commit date: $latest_commit_date, Release date: $latest_release_date"
            
            if [[ "$latest_commit_date" > "$latest_release_date" ]]; then
              echo "Found updates in $repo since last release"
              has_changes=true
              repo_name=$(basename "$repo")
              
              # 创建可点击的commit链接
              commit_link="[${short_commit_hash}](https://github.com/${repo}/commit/${latest_commit_hash})"
              
              # 获取上次release到现在的所有commit信息
              since_date="${latest_release_date}T00:00:00Z"
              until_date="${latest_commit_date}T23:59:59Z"
              changes_url="https://api.github.com/repos/${repo}/commits?since=${since_date}&until=${until_date}"
              changes_info=$(curl -s "${changes_url}")
              changes_count=$(echo "$changes_info" | jq '. | length')
              
              # 创建可查看所有变更的链接
              changes_link=""
              if [[ "$changes_count" -gt 1 ]]; then
                changes_link=" ([查看全部${changes_count}个更改](https://github.com/${repo}/commits?since=${latest_release_date}&until=${latest_commit_date}))"
              fi
              
              release_body="${release_body}${repo_name}: ${commit_link}${changes_link}\n"
            fi
          done
          
          echo "has_changes=$has_changes" >> $GITHUB_OUTPUT
          # 使用多行输出语法
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo -e "$release_body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Force build for manual trigger
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "release_body=Manual build triggered by workflow_dispatch" >> $GITHUB_OUTPUT

  build:
    needs: check
    if: needs.check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - aarch64_generic
          - x86_64
          - aarch64_cortex-a53
        branch:
          - openwrt-24.10
          - SNAPSHOT

    steps:
      - uses: actions/checkout@v4

      - name: Read build list and clone repositories
        run: |
          mkdir -p sources
          while IFS= read -r repo; do
            [ -z "$repo" ] && continue
            echo "Cloning $repo..."
            git clone "https://github.com/$repo" "sources/$(basename $repo)"
          done < sourcelist.txt
          bash hack.sh

#      - name: Free disk space
#        run: |
#          sudo rm -rf /usr/lib/{jvm,llvm} /usr/local /usr/src/* /var/lib/gems /var/lib/mysql /var/lib/snapd /etc/skel /opt/{microsoft,az,hostedtoolcache,cni,mssql-tools,pipx} /usr/share/{az*,dotnet,swift,miniconda,gradle*,java,kotlinc,ri,sbt} /root/{.sbt,.local,.npm} /usr/libexec/gcc/x86_64-linux-gnu/14 /usr/lib/x86_64-linux-gnu/{*clang*,*LLVM*} /home/linuxbrew

      - name: Show build info
        id: pkglist
        run: |
          echo -e "\n\e[1;32mMemory:\e[0m"
          sudo free -h
          echo -e "\e[1;32mAvailable Storage:\e[0m"
          sudo df -Th
          echo -e "PACKAGES: $(cat packages.txt)"
          echo "packages=${pkg_list# }" >> $GITHUB_OUTPUT
          echo "date=$(date '+%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Build packages
        uses: JohnsonRan/gh-action-sdk@main
        env:
          ARCH: ${{ matrix.arch }}-${{ matrix.branch }}
          FEEDNAME: InfinitySubstance
          INDEX: 1
          KEY_BUILD: ${{ secrets.KEY_BUILD }}
          NO_REFRESH_CHECK: true
          NO_SHFMT_CHECK: true
          IGNORE_ERRORS: true

      - name: compress
        run: |
          tar -c -z -f InfinitySubstance_${{ matrix.arch }}-${{ matrix.branch }}.tar.gz -C bin/packages/${{ matrix.arch }}/InfinitySubstance .
          mkdir -p public/${{ matrix.branch }}/${{ matrix.arch }}
          mv bin/packages/${{ matrix.arch }}/InfinitySubstance public/${{ matrix.branch }}/${{ matrix.arch }}
          tar -c -z -f feed_InfinitySubstance_${{ matrix.arch }}-${{ matrix.branch }}.tar.gz public/${{ matrix.branch }}/${{ matrix.arch }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: feed_InfinitySubstance_${{ matrix.arch }}-${{ matrix.branch }}
          path: feed_InfinitySubstance_${{ matrix.arch }}-${{ matrix.branch }}.tar.gz

      - name: Create release
        continue-on-error: true
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ steps.pkglist.outputs.date }}
          allowUpdates: true
          tag: ${{ steps.pkglist.outputs.date }}
          commit: main
          replacesArtifacts: true
          body: ${{ needs.check.outputs.release_body }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "InfinitySubstance_${{ matrix.arch }}-${{ matrix.branch }}.tar.gz"

  feed:
    needs: build
    name: feed
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: download
        uses: actions/download-artifact@v4
        with:
          pattern: feed_InfinitySubstance_*
          merge-multiple: true
      
      - name: uncompress
        run: |
          for file in feed_InfinitySubstance_*.tar.gz; do tar -x -z -f "$file"; done
      
      - name: key
        run: |
          echo "${{ secrets.KEY_BUILD_PUB }}" > public/key-build.pub

      - name: generate index
        run: |
          bash scripts/generate-index.sh public
          echo 'opkg.ihtw.moe' > ./public/CNAME
          cp README.md public/

      - name: feed
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force_orphan: true
          commit_message: "release: ${{ github.ref_name }}"

  cleanup:
    needs: feed
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Clear GitHub Actions Cache
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh cache delete --all

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 2
